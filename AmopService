#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
# -*- coding: utf-8 -*-
"""
  FISCO BCOS/Python-SDK is a python client for FISCO BCOS2.0 (https://github.com/FISCO-BCOS/)
  FISCO BCOS/Python-SDK is free software: you can redistribute it and/or modify it under the
  terms of the MIT License as published by the Free Software Foundation. This project is
  distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Thanks for
  authors and contributors of eth-abi, eth-account, eth-hashï¼Œeth-keys, eth-typing, eth-utils,
  rlp, eth-rlp , hexbytes ... and relative projects
  @author: kentzhang
  @date: 2020-10-20
"""


class AmopInterface:

    def __init__(self):
        pass

    def start(self):
        pass
    def stop(self):
        pass

    '''
     * Subscribe a normal topic.
      * param topicName the topic name
     * param callback callback is called when receive a msg relate to this topic
    '''

    def subscribeTopic(self, topicName, amopcallback):
        pass
    '''
     * Subscribe a private topic which need verify.
     *
     * @param topicName the topic name
     * @param privateKeyTool the private key you used to prove your identity.
     * @param callback callback is called when receive a msg relate to this topic
     '''

    def subscribePrivateTopics(self, topicName, privateKeyTool, amopcallback):
        pass
    '''
     * Config a topic which is need verification, after that user can send message to verified
     * subscriber.
     *
     * @param topicName the topic name
     * @param publicKeyTools the public keys of the target organizations that you want to
     *     communicate with
     '''

    def publishPrivateTopic(self, topicName, publicKeyList):
        pass

    '''
     * Unsubscribe a topic.
     * @param topicName the topic name
    '''

    def unsubscribeTopic(self, topicName):
        pass

    '''
     * Send amop msg
     * @param content the sent message
     * @param callback the callback that will be called when receive the AMOP response
    '''

    def sendAmopMsg(self, content, amopcallback):
        pass

    '''
     * Send amop msg
     * @param content the broadcasted AMOP message
    '''

    def broadcastAmopMsg(self, content):
        pass

    '''
     * Get all subscribe topics.
     * @return topic name list
     '''

    def getSubTopics(self):
        pass

    '''
     * Get list of subscribers to a topic
     * @param topicName the topic you want to query
     * @return List of subscribers
    '''

    def getTopicSubscribers(self, topicName):
        pass

    '''
     * set amop default callback
     *
     * @param cb the amop callback
    '''

    def setCallback(self, cb):
        pass

    '''
     * generate message sequence string
     *
     * @return Sequence string
    '''
    @staticmethod
    def newSeq():
        """
        String seq = UUID.randomUUID().toString().replaceAll("-", "");
        """
        pass

    def sendSubscribe(self):
        pass

"""
implement of Amop interface
"""
class AmopImpl(AmopInterface):
    def __init__(self):
        pass